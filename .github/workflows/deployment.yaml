name: Deploy to ECS

on:
  push:
    branches:
      - 'main'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'us-east-1'
      ECR_REPOSITORY: 'my-ecr-repo'
      ECS_CLUSTER: 'my-ecs-cluster'
      ECS_SERVICE: 'my-ecs-service'
      ECS_TASK_DEFINITION: 'my-task-definition'
      IMAGE_TAG: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ env.AWS_REGION }}

      - name: Build Docker image
        run: |
          aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker build -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .

      - name: Tag Docker image for ECR
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Fetch current ECS task definition
        id: fetch_task_definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --region ${{ env.AWS_REGION }} \
            --query "taskDefinition" \
            --output json > task_definition.json

      - name: Modify ECS task definition with new image
        run: |
          # Use jq to clean up the task definition by removing non-required fields
          jq 'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' task_definition.json > new_task_definition.json

          # Update the task definition JSON with the new image
          jq --arg IMAGE "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" \
            '.containerDefinitions[0].image = $IMAGE' new_task_definition.json > final_task_definition.json

      - name: Register new ECS task definition
        id: register_task_definition
        run: |
          # Print the final task definition JSON for debugging
          echo "Final Task Definition JSON:"
          cat final_task_definition.json

          # Register the modified task definition
          new_task_definition_arn=$(aws ecs register-task-definition \
            --cli-input-json file://final_task_definition.json \
            --region ${{ env.AWS_REGION }} \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          # Print the ARN of the new task definition
          echo "New Task Definition ARN: $new_task_definition_arn"
          echo "new_task_definition_arn=$new_task_definition_arn" >> $GITHUB_ENV

      - name: Deploy to ECS Service
        run: |
          # Deploy the new task definition to ECS
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.new_task_definition_arn }} \
            --region ${{ env.AWS_REGION }}
