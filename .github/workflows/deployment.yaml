name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                     # AWS region (e.g., us-west-1)
  ECR_REPOSITORY: nestjs-server-demo         # ECR repository name
  ECS_SERVICE: nestjs-server-demo-service   # ECS service name
  ECS_CLUSTER: nestjs-server-demo-cluster   # ECS cluster name
  ECS_TASK_DEFINITION: nestjs-server-demo-task # ECS task definition file path (e.g., .aws/task-definition.json)
  CONTAINER_NAME: nestjs-server-demo-container # Container name in ECS task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials for deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Login to Amazon ECR Public
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
        with:
          registry: ${{ secrets.ECR_REGISTRY }}  # Use the ECR Public registry URL here

      # Step 4: Build, tag, and push the Docker image to Amazon ECR Public
      - name: Build, tag, and push image to Amazon ECR Public
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}  # ECR Public registry URL
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image and push it to ECR Public
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    #   # Step 5: Render ECS task definition with the new image
    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
    #     with:
    #       task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #       container-name: ${{ env.CONTAINER_NAME }}
    #       image: ${{ steps.build-image.outputs.image }}

    #   # Step 6: Deploy ECS task definition to the service
    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: ${{ env.ECS_SERVICE }}
    #       cluster: ${{ env.ECS_CLUSTER }}
    #       wait-for-service-stability: true
